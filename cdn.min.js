document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded fired.');

    let client = null;
    let isMqttConnected = false;

    const MQTT_TOPICS = {
        state: "pellet/boiler/state",
        control: "pellet/boiler/control",
        targetTemp: "pellet/boiler/target_temp",
        power: "pellet/boiler/power"
    };

    const mqttBrokerInput = document.getElementById('mqtt-broker');
    const mqttPortInput = document.getElementById('mqtt-port');
    const mqttUsernameInput = document.getElementById('mqtt-username');
    const mqttPasswordInput = document.getElementById('mqtt-password');
    const mqttConnectBtn = document.getElementById('mqtt-connect-btn');
    const mqttDisconnectBtn = document.getElementById('mqtt-disconnect-btn');
    const mqttStatusIndicator = document.getElementById('mqtt-status-indicator');
    const mqttStatusText = document.getElementById('mqtt-status-text');
    const mqttLogDiv = document.getElementById('mqtt-log');

    const powerBtn = document.getElementById('power-btn');
    const targetSlider = document.getElementById('target-slider');
    const targetDisplay = document.getElementById('target-display');
    const targetTemp = document.getElementById('target-temp');

    const waterTempDisplay = document.getElementById('water-temp');
    const roomTempDisplay = document.getElementById('room-temp');
    const burnerTempDisplay = document.getElementById('burner-temp');
    const exhaustTempDisplay = document.getElementById('exhaust-temp');
    const waterProgressBar = document.getElementById('water-progress');
    const flameIndicator = document.getElementById('flame-indicator');
    
    const feederStatusIndicatorMini = document.getElementById('feeder-status-indicator-mini');
    const blowerStatusIndicatorMini = document.getElementById('blower-status-indicator-mini');
    const maintenanceStatus = document.getElementById('maintenance-status');
    const maintenanceStatusBadge = document.getElementById('maintenance-status-badge');
    const ashCleaningStatus = document.getElementById('ash-cleaning-status');
    const cleaningStatusBadge = document.getElementById('cleaning-status-badge');
    const igniterIndicator = document.getElementById('igniter-indicator');
    const igniterStatusText = document.getElementById('igniter-status-text');
    const igniterTempDisplay = document.getElementById('igniter-temp-display');
    const feederStatus = document.getElementById('feeder-status');
    const cycleProgressBar = document.getElementById('cycle-progress-bar');
    const cycleTimer = document.getElementById('cycle-timer');
    const pelletAmount = document.getElementById('pellet-amount');
    const averagePelletConsumptionDisplay = document.getElementById('average-pellet-consumption');

    const feedTimeInput = document.getElementById('feed-time');
    const pauseTimeInput = document.getElementById('pause-time');
    const maintenanceFeedInput = document.getElementById('maintenance-feed');
    const maintenancePauseInput = document.getElementById('maintenance-pause');

    const blowerManualControlsDiv = document.getElementById('blower-manual-controls');
    const blowerManualToggle = document.getElementById('blower-manual-toggle');
    const blowerWorkPowerSlider = document.getElementById('blower-work-power-slider');
    const blowerWorkPowerDisplay = document.getElementById('blower-work-power-display');
    const blowerMaintenanceManualPowerSlider = document.getElementById('blower-maintenance-manual-power-slider');
    const blowerMaintenanceManualPowerDisplay = document.getElementById('blower-maintenance-manual-power-display');
    const blowerPurgeManualPowerSlider = document.getElementById('blower-purge-manual-power-slider');
    const blowerPurgeManualPowerDisplay = document.getElementById('blower-purge-manual-power-display');
    const blowerPowerSlider = document.getElementById('blower-power-slider');
    const blowerPowerDisplay = document.getElementById('blower-power-display');
    const blowerPurgeToggle = document.getElementById('blower-purge-toggle');
    const blowerPurgeTimesContainer = document.getElementById('blower-purge-times');
    const blowerPurgeOnInput = document.getElementById('blower-purge-on');
    const blowerPurgeOffInput = document.getElementById('blower-purge-off');

    const sessionUptimeDisplay = document.getElementById('session-uptime');
    const totalUptimeDisplay = document.getElementById('total-uptime');
    const rssi = document.getElementById('rssi');
    const ipAddr = document.getElementById('ip-addr');

    const burnerHoursDisplay = document.getElementById('burner-hours');
    const estimatedCostDisplay = document.getElementById('estimated-cost');
    const pelletPriceInput = document.getElementById('pellet-price');
    const pelletConsumptionInput = document.getElementById('pellet-consumption');
    const totalCalculatedCost = document.getElementById('total-calculated-cost');
    const efficiencyFill = document.getElementById('efficiency-fill');
    const efficiencyLabel = document.getElementById('efficiency-label');

    const cleanHoursInput = document.getElementById('clean-hours');
    const cleanMinutesInput = document.getElementById('clean-minutes');
    const cleanSecondsInput = document.getElementById('clean-seconds');
    const updateCleanBtn = document.getElementById('update-clean-btn');
    const cleanCountdownDisplay = document.getElementById('clean-countdown-display');

    const ashBtn = document.getElementById('ash-btn');
    const resetSessionUptimeBtn = document.getElementById('reset-session-uptime-btn');
    const resetHistoryBtn = document.getElementById('reset-history-btn');
    const resetPasswordInput = document.getElementById('reset-password');
    const resetMessageDiv = document.getElementById('reset-message');
    
    const temperatureChartToggles = document.getElementById('temperature-chart-toggles');
    const mainChartSwitcher = document.getElementById('main-chart-switcher');
    const chartContainerTemp = document.getElementById('chart-container-temp');
    const chartContainerConsumption = document.getElementById('chart-container-consumption');
    const chartContainerDailyConsumption = document.getElementById('chart-container-daily-consumption');
    const chartContainerMonthlyConsumption = document.getElementById('chart-container-monthly-consumption');
    const chartContainerYearlyConsumption = document.getElementById('chart-container-yearly-consumption');
    const chartContainerGlobalConsumption = document.getElementById('chart-container-global-consumption');
    const historyRangeButtons = document.querySelectorAll('.history-btn');

    let temperatureChartInstance, consumptionChartInstance, dailyConsumptionChartInstance, monthlyConsumptionChartInstance, yearlyConsumptionChartInstance, globalConsumptionChartInstance;

    const chartData = {
        water_temp: [],
        room_temp: [],
        burner_temp: [],
        exhaust_temp: [],
        pellet_consumption: []
    };
    const chartDatasetMap = {
        'water_temp': 0,
        'room_temp': 1,
        'burner_temp': 2,
        'exhaust_temp': 3
    };

    function appendMqttLog(topic, message, type = 'received') {
        const now = new Date();
        const time = now.toTimeString().split(' ')[0].substring(0, 8);
        const logEntry = document.createElement('div');
        logEntry.classList.add('mqtt-log-entry');
        let messageClass = 'mqtt-log-message';
        if (type === 'sent') messageClass += ' mqtt-log-sent';
        else if (type === 'error') messageClass += ' mqtt-log-error';
        logEntry.innerHTML = `<span class="mqtt-log-time">[${time}]</span> <span class="mqtt-log-topic">${topic}</span>: <span class="${messageClass}">${message}</span>`;
        mqttLogDiv.prepend(logEntry);
        while (mqttLogDiv.children.length > 50) mqttLogDiv.removeChild(mqttLogDiv.lastChild);
    }

    function updateMqttStatus(connected) {
        isMqttConnected = connected;
        if (connected) {
            mqttStatusIndicator.classList.remove('disconnected');
            mqttStatusIndicator.classList.add('connected');
            mqttStatusText.textContent = "Połączono";
            if (!client._hasConnectedOnce) {
                appendMqttLog("MQTT", "Połączono z brokerem");
                client._hasConnectedOnce = true;
            }
        } else {
            mqttStatusIndicator.classList.remove('connected');
            mqttStatusIndicator.classList.add('disconnected');
            mqttStatusText.textContent = "Rozłączono";
            if (client && client._hasConnectedOnce) {
                appendMqttLog("MQTT", "Rozłączono z brokerem");
                client._hasConnectedOnce = false;
            }
        }
        if (mqttConnectBtn) mqttConnectBtn.disabled = connected;
        if (mqttDisconnectBtn) mqttDisconnectBtn.disabled = !connected;
        if (powerBtn) powerBtn.disabled = !connected;
        if (targetSlider) targetSlider.disabled = !connected;
        if (feedTimeInput) feedTimeInput.disabled = !connected;
        if (pauseTimeInput) pauseTimeInput.disabled = !connected;
        if (maintenanceFeedInput) maintenanceFeedInput.disabled = !connected;
        if (maintenancePauseInput) maintenancePauseInput.disabled = !connected;
        if (blowerManualToggle) blowerManualToggle.disabled = !connected;
        if (blowerWorkPowerSlider) blowerWorkPowerSlider.disabled = !connected;
        if (blowerMaintenanceManualPowerSlider) blowerMaintenanceManualPowerSlider.disabled = !connected;
        if (blowerPurgeManualPowerSlider) blowerPurgeManualPowerSlider.disabled = !connected;
        if (blowerPurgeToggle) blowerPurgeToggle.disabled = !connected;
        if (blowerPurgeOnInput) blowerPurgeOnInput.disabled = !connected;
        if (blowerPurgeOffInput) blowerPurgeOffInput.disabled = !connected;
        if (autoCleanToggle) autoCleanToggle.disabled = !connected;
        if (ashBtn) ashBtn.disabled = !connected;
        if (cleanHoursInput) cleanHoursInput.disabled = !connected;
        if (cleanMinutesInput) cleanMinutesInput.disabled = !connected;
        if (cleanSecondsInput) cleanSecondsInput.disabled = !connected;
        if (updateCleanBtn) updateCleanBtn.disabled = !connected;
        if (resetSessionUptimeBtn) resetSessionUptimeBtn.disabled = !connected;
        if (resetHistoryBtn) resetHistoryBtn.disabled = !connected;
        if (resetPasswordInput) resetPasswordInput.disabled = !connected;
        if (pelletPriceInput) pelletPriceInput.disabled = !connected;
    }

    function connectMQTT() {
        console.log('Attempting MQTT connection...');
        if (client && client.connected) {
            appendMqttLog("MQTT", "Już połączono z brokerem.");
            return;
        }

        const broker = mqttBrokerInput.value;
        const port = mqttPortInput.value;
        const username = mqttUsernameInput.value;
        const password = mqttPasswordInput.value;

        const mqttUrl = `wss://${broker}:${port}/mqtt`;
        appendMqttLog("MQTT", `Próba połączenia z brokerem: ${mqttUrl}`);

        client = mqtt.connect(mqttUrl, {
            clientId: 'web_client_' + Math.random().toString(16).substr(2, 8),
            username: username,
            password: password,
            clean: true,
            keepalive: 60
        });

        client.on('connect', () => {
            updateMqttStatus(true);
            client.subscribe(MQTT_TOPICS.state, (err) => {
                if (!err) appendMqttLog("MQTT", `Subskrybowano: ${MQTT_TOPICS.state}`);
                else appendMqttLog("MQTT ERROR", `Błąd subskrypcji ${MQTT_TOPICS.state}: ${err.message}`, 'error');
            });
        });

        client.on('message', (topic, message) => {
            const msgString = message.toString();
            appendMqttLog(topic, msgString);
            if (topic === MQTT_TOPICS.state) {
                try {
                    const data = JSON.parse(msgString);
                    if (data.timestamp_ms === undefined) data.timestamp_ms = Date.now();
                    updateUI(data);
                } catch (e) {
                    appendMqttLog("JSON PARSE ERROR", `Nie udało się sparsować wiadomości: ${e.message}`, 'error');
                    console.error('MQTT: Failed to parse MQTT message:', e);
                }
            }
        });

        client.on('error', (err) => {
            appendMqttLog("MQTT ERROR", `Błąd połączenia: ${err.message}`, 'error');
            console.error('MQTT: An error occurred:', err);
            updateMqttStatus(false);
            if (client) {
                client.end();
                client = null;
            }
        });

        client.on('close', () => {
            updateMqttStatus(false);
            appendMqttLog("MQTT", "Połączenie zamknięte.");
            client = null;
        });

        client.on('offline', () => {
            appendMqttLog("MQTT", "Klient offline.");
            updateMqttStatus(false);
        });

        client.on('reconnect', () => {
            appendMqttLog("MQTT", "Próba ponownego połączenia...");
            if (mqttStatusText) mqttStatusText.textContent = 'Łączenie...';
            if (mqttStatusIndicator) {
                mqttStatusIndicator.classList.remove('connected');
                mqttStatusIndicator.classList.add('disconnected');
            }
        });
    }

    function disconnectMQTT() {
        if (client) client.end();
        else appendMqttLog("MQTT", "Klient nie jest połączony, nie ma potrzeby rozłączania.");
    }

    function publishMqttMessage(topic, message) {
        if (isMqttConnected && client) {
            client.publish(topic, message.toString(), {}, (err) => {
                if (err) appendMqttLog("PUBLISH ERROR", `Błąd publikacji na ${topic}: ${err.message}`, 'error');
                else appendMqttLog(topic, message.toString(), 'sent');
            });
        } else {
            appendMqttLog("MQTT ERROR", "Nie połączono z brokerem MQTT! Wiadomość nie wysłana.", 'error');
            console.warn("MQTT client not connected. Message not sent.");
        }
    }
    
    function formatTime(totalSeconds) {
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    function calculateAverageConsumption(durationMinutes = 60) {
        if (chartData.pellet_consumption.length === 0) return 0.0;
        const now = luxon.DateTime.now();
        const cutoffTime = now.minus({ minutes: durationMinutes }).toMillis();
        const recentData = chartData.pellet_consumption.filter(point => point.x >= cutoffTime);
        return recentData.length ? recentData.reduce((sum, point) => sum + point.y, 0) / recentData.length : 0.0;
    }

    function aggregateDailyConsumption(history) {
        const dailyData = new Map();
        const now = luxon.DateTime.now();
        history.forEach(point => {
            const dateTime = luxon.DateTime.fromMillis(point.x);
            const dateKey = dateTime.toFormat('yyyy-MM-dd');
            const consumptionKg = point.y / 60;
            dailyData.set(dateKey, (dailyData.get(dateKey) || 0) + consumptionKg);
        });
        const labels = [], data = [];
        for (let i = 6; i
